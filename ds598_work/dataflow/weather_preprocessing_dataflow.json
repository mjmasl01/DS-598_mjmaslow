{
	"name": "weather_preprocessing_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "HistoricalWeather_sink",
						"type": "DatasetReference"
					},
					"name": "WeatherSourceBronze"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "HistoricalWeather_sink",
						"type": "DatasetReference"
					},
					"name": "WeatherSinkParquet",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage_HistoricalWeather",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "FlattenWeatherSource"
				},
				{
					"name": "AddCorrectedTimestampAndLocation"
				},
				{
					"name": "FilterValidWeatherRows"
				},
				{
					"name": "AddTransformedWeatherFields"
				},
				{
					"name": "SelectFinalWeatherColumns"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['bronze/historical_weather/data/2.5/history/*']) ~> WeatherSourceBronze",
				"WeatherSourceBronze foldDown(unroll(),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenWeatherSource",
				"FlattenWeatherSource derive(timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
				"          location = 'Boston') ~> AddCorrectedTimestampAndLocation",
				"AddCorrectedTimestampAndLocation filter(!isNull(timestamp) && !isNull(temp) && !isNull(humidity)) ~> FilterValidWeatherRows",
				"FilterValidWeatherRows derive(date_time = toTimestamp(toLong(timestamp) * 1000),",
				"          id = concat(location, '_', toString(timestamp)),",
				"          temp_C = round(temp - 273.15, 2),",
				"          temp_min_C = round(temp_min - 273.15, 2),",
				"          temp_max_C = round(temp_max - 273.15, 2),",
				"          feels_like_C = round(((feels_like - 273.15) * 9 / 5) + 32, 2),",
				"          temp_min_F = round(((temp_min - 273.15) * 9 / 5) + 32, 2),",
				"          temp_max_F = round(((temp_max - 273.15) * 9 / 5) + 32, 2),",
				"          lat = 42.3601,",
				"          lon = -71.0589,",
				"          weather_id_value = toInteger(weather_id),",
				"          snow_1h = iif(isNull(snow_1h), toFloat(0.0), toFloat(snow_1h))) ~> AddTransformedWeatherFields",
				"AddTransformedWeatherFields select(mapColumn(",
				"          weather_description,",
				"          clouds_all,",
				"          timestamp,",
				"          feels_like_K = feels_like,",
				"          humidity,",
				"          pressure,",
				"          temp_K = temp,",
				"          temp_max_K = temp_max,",
				"          temp_min_K = temp_min,",
				"          weather_icon,",
				"          wind_deg,",
				"          wind_speed,",
				"          snow_1h,",
				"          location,",
				"          date_time,",
				"          id,",
				"          temp_C,",
				"          temp_min_C,",
				"          temp_max_C,",
				"          feels_like_C,",
				"          temp_min_F,",
				"          temp_max_F,",
				"          lat,",
				"          lon,",
				"          weather_id_value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFinalWeatherColumns",
				"SelectFinalWeatherColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['weather_data_silver.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> WeatherSinkParquet"
			]
		}
	}
}