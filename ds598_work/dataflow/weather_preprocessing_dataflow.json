{
	"name": "weather_preprocessing_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "HistoricalWeather_sink",
						"type": "DatasetReference"
					},
					"name": "WeatherSourceBronze"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ParquetHistoricalWeather",
						"type": "DatasetReference"
					},
					"name": "sinkSilverHistoricalWeather",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage_HistoricalWeather",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "flattenHistoricalWeatherData"
				},
				{
					"name": "derivedColumnHistoricalWeather"
				},
				{
					"name": "filterHistoricalWeather"
				},
				{
					"name": "derivedColumnUnitConversionsNtypecorrections"
				},
				{
					"name": "selectDesiredWeatherColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          calctime as double,",
				"          city_id as boolean,",
				"          cnt as short,",
				"          cod as short,",
				"          list as (clouds as (all as short), dt as integer, main as (feels_like as double, humidity as short, pressure as short, temp as double, temp_max as double, temp_min as double), rain as ({1h} as double, {3h} as double), snow as ({1h} as double, {3h} as double), weather as (description as string, icon as string, id as short, main as string)[], wind as (deg as short, gust as double, speed as double))[],",
				"          message as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['bronze/historical_weather/data/2.5/history/*']) ~> WeatherSourceBronze",
				"WeatherSourceBronze foldDown(unroll(list),",
				"     mapColumn(",
				"          calctime,",
				"          city_id,",
				"          cnt,",
				"          cod,",
				"          list,",
				"          message,",
				"          clouds_all = list.clouds.all,",
				"          timestamp = list.dt,",
				"          feels_like = list.main.feels_like,",
				"          humidity = list.main.humidity,",
				"          pressure = list.main.pressure,",
				"          temp = list.main.temp,",
				"          temp_max = list.main.temp_max,",
				"          temp_min = list.main.temp_min,",
				"          weather_description = list.weather.description,",
				"          weather_icon = list.weather.icon,",
				"          weather_id = list.weather.id,",
				"          weather_main = list.weather.main,",
				"          wind_deg = list.wind.deg,",
				"          wind_gust = list.wind.gust,",
				"          wind_speed = list.wind.speed,",
				"          rain_1h = list.rain.{1h}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenHistoricalWeatherData",
				"flattenHistoricalWeatherData derive(corrected_timestamp = iif(length(toString(timestamp)) > 10, toTimestamp(null()), toTimestamp(timestamp)),",
				"          location = 'Boston') ~> derivedColumnHistoricalWeather",
				"derivedColumnHistoricalWeather filter(!isNull(corrected_timestamp) && !isNull(temp) && !isNull(humidity)) ~> filterHistoricalWeather",
				"filterHistoricalWeather derive(datetime = toTimestamp(toLong(corrected_timestamp) * 1000),",
				"          id = concat(location, '_', toString(corrected_timestamp)),",
				"          temp_C = round(temp - 273.15, 2),",
				"          temp_min_C = round(temp_min - 273.15, 2),",
				"          temp_max_C = round(temp_max - 273.15, 2),",
				"          feels_like_C = round(feels_like - 273.15, 2),",
				"          feels_like_F = round((feels_like - 273.15) * 9/5 + 32, 2),",
				"          temp_F = round((temp - 273.15) * 9/5 + 32, 2),",
				"          temp_min_F = round((temp_min - 273.15) * 9/5 + 32, 2),",
				"          temp_max_F = round((temp_max - 273.15) * 9/5 + 32, 2),",
				"          lat = 42.3601,",
				"          lon = -71.0589,",
				"          rain_1h = iif(isNull(rain_1h), toFloat(0.0), toFloat(rain_1h))) ~> derivedColumnUnitConversionsNtypecorrections",
				"derivedColumnUnitConversionsNtypecorrections select(mapColumn(",
				"          list,",
				"          clouds_all,",
				"          feels_like_K = feels_like,",
				"          humidity,",
				"          pressure,",
				"          temp_K = temp,",
				"          temp_max_K = temp_max,",
				"          temp_min_K = temp_min,",
				"          weather_description,",
				"          weather_icon,",
				"          weather_id,",
				"          wind_deg,",
				"          wind_gust,",
				"          wind_speed,",
				"          rain_1h,",
				"          corrected_timestamp,",
				"          location,",
				"          datetime,",
				"          id,",
				"          temp_C,",
				"          temp_min_C,",
				"          temp_max_C,",
				"          feels_like_C,",
				"          feels_like_F,",
				"          temp_F,",
				"          temp_min_F,",
				"          temp_max_F,",
				"          lat,",
				"          lon",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDesiredWeatherColumns",
				"selectDesiredWeatherColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkSilverHistoricalWeather"
			]
		}
	}
}