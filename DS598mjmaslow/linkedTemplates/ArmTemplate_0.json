{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DS598mjmaslow"
		},
		"AzureBlobStorage_AirPollution_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_AirPollution'"
		},
		"AzureBlobStorage_HistoricalWeather_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_HistoricalWeather'"
		},
		"DS598_mjmaslow_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'DS598_mjmaslow'"
		},
		"DS598_mjmaslow_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "mjmaslow"
		},
		"HttpServer_Air_Pollution_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org/"
		},
		"HttpServer_HistoricalWeather_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_AirPollution')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_AirPollution_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_HistoricalWeather')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_HistoricalWeather_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS598_mjmaslow')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('DS598_mjmaslow_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('DS598_mjmaslow_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQEVBRDAyMzk1LTk5MkEtNDhDNC1BRUZCLTMyMzU5MDQzNkI3OV82ZjY4NmE4Ni1kZTM5LTQyNTEtOWQ1OS05MTI4YmNjNWNkZmYiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer_Air_Pollution')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer_Air_Pollution_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer_HistoricalWeather')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer_HistoricalWeather_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Air_Pollution_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_AirPollution",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "processed_air_pollution_Jan12024_Jan12025.json",
						"folderPath": "silver/air_pollution",
						"container": "homwork1"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_AirPollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Air_Pollution_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_Air_Pollution",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "data/2.5/air_pollution/history?lat=42.3601&lon=-71.0589&start=1707091200&end=1738704000&appid=fb5db4bc5fe067c1245a42fef44a01ea"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer_Air_Pollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalWeather_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_HistoricalWeather",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"weekID": {
						"type": "int"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('processed_weather_week_', formatDateTime(subtractFromTime(subtractFromTime(utcNow(), dayOfWeek(utcNow()), 'Day'), dataset().weekID, 'Week'), 'yyyyMMdd'), '.json')",
							"type": "Expression"
						},
						"folderPath": "silver/historical_weather",
						"container": "homwork1"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_HistoricalWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalWeather_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_HistoricalWeather",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"weekID": {
						"type": "int"
					},
					"appid": {
						"type": "string",
						"defaultValue": "fb5db4bc5fe067c1245a42fef44a01ea"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/weather?lat=42.3601&lon=-71.0589&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer_HistoricalWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonWeatherSourceBronze_4_Flattening')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_HistoricalWeather",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "bronze/historical_weather",
						"container": "homwork1"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"coord": {
							"type": "object",
							"properties": {
								"lon": {
									"type": "number"
								},
								"lat": {
									"type": "number"
								}
							}
						},
						"weather": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "integer"
									},
									"main": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"icon": {
										"type": "string"
									}
								}
							}
						},
						"base": {
							"type": "string"
						},
						"main": {
							"type": "object",
							"properties": {
								"temp": {
									"type": "number"
								},
								"feels_like": {
									"type": "number"
								},
								"temp_min": {
									"type": "number"
								},
								"temp_max": {
									"type": "number"
								},
								"pressure": {
									"type": "integer"
								},
								"humidity": {
									"type": "integer"
								},
								"sea_level": {
									"type": "integer"
								},
								"grnd_level": {
									"type": "integer"
								}
							}
						},
						"visibility": {
							"type": "integer"
						},
						"wind": {
							"type": "object",
							"properties": {
								"speed": {
									"type": "number"
								},
								"deg": {
									"type": "integer"
								}
							}
						},
						"snow": {
							"type": "object",
							"properties": {
								"1h": {
									"type": "number"
								}
							}
						},
						"clouds": {
							"type": "object",
							"properties": {
								"all": {
									"type": "integer"
								}
							}
						},
						"dt": {
							"type": "integer"
						},
						"sys": {
							"type": "object",
							"properties": {
								"type": {
									"type": "integer"
								},
								"id": {
									"type": "integer"
								},
								"country": {
									"type": "string"
								},
								"sunrise": {
									"type": "integer"
								},
								"sunset": {
									"type": "integer"
								}
							}
						},
						"timezone": {
							"type": "integer"
						},
						"id": {
							"type": "integer"
						},
						"name": {
							"type": "string"
						},
						"cod": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_HistoricalWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AirPollution_Ingestion_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_AirPollution_Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Air_Pollution_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Air_Pollution_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Air_Pollution_source')]",
				"[concat(variables('factoryId'), '/datasets/Air_Pollution_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherHistory_Ingestion_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_HitoricalWeather",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, 52)",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy_HistoricalWeather_Data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "HistoricalWeather_source",
											"type": "DatasetReference",
											"parameters": {
												"weekID": "@item()",
												"appid": "fb5db4bc5fe067c1245a42fef44a01ea"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "HistoricalWeather_sink",
											"type": "DatasetReference",
											"parameters": {
												"weekID": "@item()"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"weekOffset": {
						"type": "Integer"
					},
					"weekParam": {
						"type": "Integer"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HistoricalWeather_source')]",
				"[concat(variables('factoryId'), '/datasets/HistoricalWeather_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather_preprocessing_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "JsonWeatherSourceBronze_4_Flattening",
								"type": "DatasetReference"
							},
							"name": "WeatherSourceBronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HistoricalWeather_sink",
								"type": "DatasetReference"
							},
							"name": "WeatherSinkParquet",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage_HistoricalWeather",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "FlattenWeatherSource"
						},
						{
							"name": "AddCorrectedTimestampAndLocation"
						},
						{
							"name": "FilterValidWeatherRows"
						},
						{
							"name": "AddTransformedWeatherFields"
						},
						{
							"name": "SelectFinalWeatherColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          coord as (lon as double, lat as double),",
						"          weather as (id as integer, main as string, description as string, icon as string)[],",
						"          base as string,",
						"          main as (temp as double, feels_like as double, temp_min as double, temp_max as double, pressure as integer, humidity as integer, sea_level as integer, grnd_level as integer),",
						"          visibility as integer,",
						"          wind as (speed as double, deg as integer),",
						"          snow as ({1h} as double),",
						"          clouds as (all as integer),",
						"          dt as integer,",
						"          sys as (type as integer, id as integer, country as string, sunrise as integer, sunset as integer),",
						"          timezone as integer,",
						"          id as integer,",
						"          name as string,",
						"          cod as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['bronze/historical_weather/*.json']) ~> WeatherSourceBronze",
						"WeatherSourceBronze foldDown(unroll(weather),",
						"     mapColumn(",
						"          city_id = sys.id,",
						"          cnt = base,",
						"          cod,",
						"          weather_description = weather.description,",
						"          clouds_all = clouds.all,",
						"          timestamp = dt,",
						"          feels_like = main.feels_like,",
						"          humidity = main.humidity,",
						"          pressure = main.pressure,",
						"          temp = main.temp,",
						"          temp_max = main.temp_max,",
						"          temp_min = main.temp_min,",
						"          weather_icon = weather.icon,",
						"          weather_id = weather.id,",
						"          weather_main = weather.main,",
						"          wind_deg = wind.deg,",
						"          wind_speed = wind.speed,",
						"          snow_1h = snow.{1h},",
						"          location = name",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenWeatherSource",
						"FlattenWeatherSource derive(timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
						"          location = 'Boston') ~> AddCorrectedTimestampAndLocation",
						"AddCorrectedTimestampAndLocation filter(!isNull(timestamp) && !isNull(temp) && !isNull(humidity)) ~> FilterValidWeatherRows",
						"FilterValidWeatherRows derive(date_time = toTimestamp(toLong(timestamp) * 1000),",
						"          id = concat(location, '_', toString(timestamp)),",
						"          temp_C = round(temp - 273.15, 2),",
						"          temp_min_C = round(temp_min - 273.15, 2),",
						"          temp_max_C = round(temp_max - 273.15, 2),",
						"          feels_like_C = round(((feels_like - 273.15) * 9 / 5) + 32, 2),",
						"          temp_min_F = round(((temp_min - 273.15) * 9 / 5) + 32, 2),",
						"          temp_max_F = round(((temp_max - 273.15) * 9 / 5) + 32, 2),",
						"          lat = 42.3601,",
						"          lon = -71.0589,",
						"          weather_id_value = toInteger(weather_id),",
						"          snow_1h = iif(isNull(snow_1h), toFloat(0.0), toFloat(snow_1h))) ~> AddTransformedWeatherFields",
						"AddTransformedWeatherFields select(mapColumn(",
						"          weather_description,",
						"          clouds_all,",
						"          timestamp,",
						"          feels_like_K = feels_like,",
						"          humidity,",
						"          pressure,",
						"          temp_K = temp,",
						"          temp_max_K = temp_max,",
						"          temp_min_K = temp_min,",
						"          weather_icon,",
						"          wind_deg,",
						"          wind_speed,",
						"          snow_1h,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_C,",
						"          temp_min_C,",
						"          temp_max_C,",
						"          feels_like_C,",
						"          temp_min_F,",
						"          temp_max_F,",
						"          lat,",
						"          lon,",
						"          weather_id_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalWeatherColumns",
						"SelectFinalWeatherColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['weather_data_silver.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> WeatherSinkParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/JsonWeatherSourceBronze_4_Flattening')]",
				"[concat(variables('factoryId'), '/datasets/HistoricalWeather_sink')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_HistoricalWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/airPollution_preprocessing_data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Air_Pollution_sink",
								"type": "DatasetReference"
							},
							"name": "AirPollutionSourceBronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Air_Pollution_sink",
								"type": "DatasetReference"
							},
							"name": "PollutionSinkParquet",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage_AirPollution",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flattenAirPollutionSource"
						},
						{
							"name": "AddCorrectedTimestampAndLocation"
						},
						{
							"name": "FilterValidPollutionRows"
						},
						{
							"name": "AddTransformedPollutionFields"
						},
						{
							"name": "selectFinalPollutionColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          coord as (lat as double, lon as double),",
						"          list as (components as (co as double, nh3 as double, no as double, no2 as double, o3 as double, pm10 as double, pm2_5 as double, so2 as double), dt as integer, main as (aqi as short))[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['bronze/air_pollution/*.json']) ~> AirPollutionSourceBronze",
						"AirPollutionSourceBronze foldDown(unroll(list, list),",
						"     mapColumn(",
						"          aqi = list.main.aqi,",
						"          timestamp = list.dt,",
						"          co = list.components.co,",
						"          nh3 = list.components.nh3,",
						"          no = list.components.no,",
						"          no2 = list.components.no2,",
						"          o3 = list.components.o3,",
						"          pm10 = list.components.pm10,",
						"          pm2_5 = list.components.pm2_5,",
						"          so2 = list.components.so2",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenAirPollutionSource",
						"flattenAirPollutionSource derive(timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
						"          location = 'Boston') ~> AddCorrectedTimestampAndLocation",
						"AddCorrectedTimestampAndLocation filter(!isNull(timestamp) && !isNull(aqi)",
						") ~> FilterValidPollutionRows",
						"FilterValidPollutionRows derive(date_time = toTimestamp(toLong(timestamp) * 1000),",
						"          id = concat(location, '_', toString(timestamp)),",
						"          co = round(co, 2),",
						"          nh3 = round(nh3, 2),",
						"          no = round(no, 2),",
						"          no2 = round(no2, 2),",
						"          o3 = round(o3, 2),",
						"          pm10 = round(pm10, 2),",
						"          pm2_5 = round(pm2_5, 2),",
						"          so2 = round(so2, 2)) ~> AddTransformedPollutionFields",
						"AddTransformedPollutionFields select(mapColumn(",
						"          aqi,",
						"          co,",
						"          nh3,",
						"          no,",
						"          no2,",
						"          o3,",
						"          pm10,",
						"          pm2_5,",
						"          so2,",
						"          location,",
						"          date_time,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinalPollutionColumns",
						"selectFinalPollutionColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['air_pollution_data_silver.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PollutionSinkParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Air_Pollution_sink')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_AirPollution')]"
			]
		}
	]
}