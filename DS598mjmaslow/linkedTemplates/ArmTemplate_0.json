{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DS598mjmaslow"
		},
		"AzureBlobStorage_AirPollution_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_AirPollution'"
		},
		"AzureBlobStorage_HistoricalWeather_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_HistoricalWeather'"
		},
		"DS598_mjmaslow_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'DS598_mjmaslow'"
		},
		"DS598_mjmaslow_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "mjmaslow"
		},
		"HttpServer_Air_Pollution_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org/"
		},
		"HttpServer_HistoricalWeather_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://history.openweathermap.org/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_AirPollution')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_AirPollution_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_HistoricalWeather')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_HistoricalWeather_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS598_mjmaslow')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('DS598_mjmaslow_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('DS598_mjmaslow_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQEVBRDAyMzk1LTk5MkEtNDhDNC1BRUZCLTMyMzU5MDQzNkI3OV82ZjY4NmE4Ni1kZTM5LTQyNTEtOWQ1OS05MTI4YmNjNWNkZmYiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer_Air_Pollution')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer_Air_Pollution_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer_HistoricalWeather')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer_HistoricalWeather_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Air_Pollution_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_AirPollution",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "airpollution_output.json",
						"folderPath": "bronze/air_pollution",
						"container": "bigdata-container"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_AirPollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Air_Pollution_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_Air_Pollution",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "string"
					},
					"lon": {
						"type": "string"
					},
					"start": {
						"type": "string"
					},
					"end": {
						"type": "string"
					},
					"appid": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/air_pollution/history?lat=@{dataset().lat}&lon=@{dataset().lon}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer_Air_Pollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalWeather_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_HistoricalWeather",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "bronze/historical_weather/data/2.5/history",
						"container": "bigdata-container"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_HistoricalWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalWeather_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_HistoricalWeather",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "float"
					},
					"lon": {
						"type": "float"
					},
					"start": {
						"type": "string"
					},
					"end": {
						"type": "string"
					},
					"datatype": {
						"type": "string"
					},
					"appid": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&type=@{dataset().datatype}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}\n\n",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer_HistoricalWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonWeatherSourceBronze_4_Flattening')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_HistoricalWeather",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "bronze/historical_weather",
						"container": "homwork1"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"coord": {
							"type": "object",
							"properties": {
								"lon": {
									"type": "number"
								},
								"lat": {
									"type": "number"
								}
							}
						},
						"weather": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "integer"
									},
									"main": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"icon": {
										"type": "string"
									}
								}
							}
						},
						"base": {
							"type": "string"
						},
						"main": {
							"type": "object",
							"properties": {
								"temp": {
									"type": "number"
								},
								"feels_like": {
									"type": "number"
								},
								"temp_min": {
									"type": "number"
								},
								"temp_max": {
									"type": "number"
								},
								"pressure": {
									"type": "integer"
								},
								"humidity": {
									"type": "integer"
								},
								"sea_level": {
									"type": "integer"
								},
								"grnd_level": {
									"type": "integer"
								}
							}
						},
						"visibility": {
							"type": "integer"
						},
						"wind": {
							"type": "object",
							"properties": {
								"speed": {
									"type": "number"
								},
								"deg": {
									"type": "integer"
								}
							}
						},
						"snow": {
							"type": "object",
							"properties": {
								"1h": {
									"type": "number"
								}
							}
						},
						"clouds": {
							"type": "object",
							"properties": {
								"all": {
									"type": "integer"
								}
							}
						},
						"dt": {
							"type": "integer"
						},
						"sys": {
							"type": "object",
							"properties": {
								"type": {
									"type": "integer"
								},
								"id": {
									"type": "integer"
								},
								"country": {
									"type": "string"
								},
								"sunrise": {
									"type": "integer"
								},
								"sunset": {
									"type": "integer"
								}
							}
						},
						"timezone": {
							"type": "integer"
						},
						"id": {
							"type": "integer"
						},
						"name": {
							"type": "string"
						},
						"cod": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_HistoricalWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetAirpollution')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_AirPollution",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "air_pollution.parquet",
						"folderPath": "silver",
						"container": "bigdata-container"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_AirPollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetHistoricalWeather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_HistoricalWeather",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "weather_data.parquet",
						"folderPath": "silver",
						"container": "bigdata-container"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_HistoricalWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AirPollution_Ingestion_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_AirPollution_Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Air_Pollution_source",
								"type": "DatasetReference",
								"parameters": {
									"lat": "42.3601",
									"lon": "-71.0589",
									"start": "1705922663",
									"end": "1737545063",
									"appid": "fb5db4bc5fe067c1245a42fef44a01ea"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Air_Pollution_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Air_Pollution_source')]",
				"[concat(variables('factoryId'), '/datasets/Air_Pollution_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherHistory_Ingestion_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_HitoricalWeather",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, pipeline().parameters.weeksAgo)",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy_HistoricalWeather_Data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "HistoricalWeather_source",
											"type": "DatasetReference",
											"parameters": {
												"lat": 42.3601,
												"lon": -71.0589,
												"start": {
													"value": "@div(sub(ticks(addDays(utcNow(), mul(add(item(),1), -7))), ticks('1970-01-01T00:00:00Z')), 10000000)",
													"type": "Expression"
												},
												"end": {
													"value": "@div(sub(ticks(addDays(utcNow(), mul(item(), -7))), ticks('1970-01-01T00:00:00Z')), 10000000)",
													"type": "Expression"
												},
												"datatype": "hour",
												"appid": "fb5db4bc5fe067c1245a42fef44a01ea"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "HistoricalWeather_sink",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"weeksAgo": {
						"type": "int",
						"defaultValue": 52
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HistoricalWeather_source')]",
				"[concat(variables('factoryId'), '/datasets/HistoricalWeather_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/airPollution_preprocessing_data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Air_Pollution_sink",
								"type": "DatasetReference"
							},
							"name": "AirPollutionSourceBronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetAirpollution",
								"type": "DatasetReference"
							},
							"name": "PollutionSinkParquet",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage_AirPollution",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flattenAirPollutionSource"
						},
						{
							"name": "AddCorrectedTimestampAndLocation"
						},
						{
							"name": "FilterValidPollutionRows"
						},
						{
							"name": "AddTransformedPollutionFields"
						},
						{
							"name": "selectFinalPollutionColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          coord as (lat as double, lon as double),",
						"          list as (components as (co as double, nh3 as double, no as double, no2 as double, o3 as double, pm10 as double, pm2_5 as double, so2 as double), dt as integer, main as (aqi as short))[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['bronze/air_pollution/*.json']) ~> AirPollutionSourceBronze",
						"AirPollutionSourceBronze foldDown(unroll(list, list),",
						"     mapColumn(",
						"          aqi = list.main.aqi,",
						"          timestamp = list.dt,",
						"          co = list.components.co,",
						"          nh3 = list.components.nh3,",
						"          no = list.components.no,",
						"          no2 = list.components.no2,",
						"          o3 = list.components.o3,",
						"          pm10 = list.components.pm10,",
						"          pm2_5 = list.components.pm2_5,",
						"          so2 = list.components.so2",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenAirPollutionSource",
						"flattenAirPollutionSource derive(timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
						"          location = 'Boston') ~> AddCorrectedTimestampAndLocation",
						"AddCorrectedTimestampAndLocation filter(!isNull(timestamp) && !isNull(aqi)) ~> FilterValidPollutionRows",
						"FilterValidPollutionRows derive(date_time = toTimestamp(toLong(timestamp) * 1000),",
						"          id = concat(location, '_', toString(timestamp)),",
						"          co = round(co, 2),",
						"          nh3 = round(nh3, 2),",
						"          no = round(no, 2),",
						"          no2 = round(no2, 2),",
						"          o3 = round(o3, 2),",
						"          pm10 = round(pm10, 2),",
						"          pm2_5 = round(pm2_5, 2),",
						"          so2 = round(so2, 2)) ~> AddTransformedPollutionFields",
						"AddTransformedPollutionFields select(mapColumn(",
						"          aqi,",
						"          co,",
						"          nh3,",
						"          no,",
						"          no2,",
						"          o3,",
						"          pm10,",
						"          pm2_5,",
						"          so2,",
						"          location,",
						"          date_time,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinalPollutionColumns",
						"selectFinalPollutionColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['air_pollution_data_silver.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PollutionSinkParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Air_Pollution_sink')]",
				"[concat(variables('factoryId'), '/datasets/ParquetAirpollution')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_AirPollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather_preprocessing_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "HistoricalWeather_sink",
								"type": "DatasetReference"
							},
							"name": "WeatherSourceBronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetHistoricalWeather",
								"type": "DatasetReference"
							},
							"name": "sinkSilverHistoricalWeather",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage_HistoricalWeather",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flattenHistoricalWeatherData"
						},
						{
							"name": "derivedColumnHistoricalWeather"
						},
						{
							"name": "filterHistoricalWeather"
						},
						{
							"name": "derivedColumnUnitConversionsNtypecorrections"
						},
						{
							"name": "selectDesiredWeatherColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          calctime as double,",
						"          city_id as boolean,",
						"          cnt as short,",
						"          cod as short,",
						"          list as (clouds as (all as short), dt as integer, main as (feels_like as double, humidity as short, pressure as short, temp as double, temp_max as double, temp_min as double), rain as ({1h} as double, {3h} as double), snow as ({1h} as double, {3h} as double), weather as (description as string, icon as string, id as short, main as string)[], wind as (deg as short, gust as double, speed as double))[],",
						"          message as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['bronze/historical_weather/data/2.5/history/*']) ~> WeatherSourceBronze",
						"WeatherSourceBronze foldDown(unroll(list),",
						"     mapColumn(",
						"          calctime,",
						"          city_id,",
						"          cnt,",
						"          cod,",
						"          list,",
						"          message,",
						"          clouds_all = list.clouds.all,",
						"          timestamp = list.dt,",
						"          feels_like = list.main.feels_like,",
						"          humidity = list.main.humidity,",
						"          pressure = list.main.pressure,",
						"          temp = list.main.temp,",
						"          temp_max = list.main.temp_max,",
						"          temp_min = list.main.temp_min,",
						"          weather_description = list.weather.description,",
						"          weather_icon = list.weather.icon,",
						"          weather_id = list.weather.id,",
						"          weather_main = list.weather.main,",
						"          wind_deg = list.wind.deg,",
						"          wind_gust = list.wind.gust,",
						"          wind_speed = list.wind.speed,",
						"          rain_1h = list.rain.{1h}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenHistoricalWeatherData",
						"flattenHistoricalWeatherData derive(corrected_timestamp = iif(length(toString(timestamp)) > 10, toTimestamp(null()), toTimestamp(timestamp)),",
						"          location = 'Boston') ~> derivedColumnHistoricalWeather",
						"derivedColumnHistoricalWeather filter(!isNull(corrected_timestamp) && !isNull(temp) && !isNull(humidity)) ~> filterHistoricalWeather",
						"filterHistoricalWeather derive(datetime = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          temp_C = round(temp - 273.15, 2),",
						"          temp_min_C = round(temp_min - 273.15, 2),",
						"          temp_max_C = round(temp_max - 273.15, 2),",
						"          feels_like_C = round(feels_like - 273.15, 2),",
						"          feels_like_F = round((feels_like - 273.15) * 9/5 + 32, 2),",
						"          temp_F = round((temp - 273.15) * 9/5 + 32, 2),",
						"          temp_min_F = round((temp_min - 273.15) * 9/5 + 32, 2),",
						"          temp_max_F = round((temp_max - 273.15) * 9/5 + 32, 2),",
						"          lat = 42.3601,",
						"          lon = -71.0589,",
						"          rain_1h = iif(isNull(rain_1h), toFloat(0.0), toFloat(rain_1h))) ~> derivedColumnUnitConversionsNtypecorrections",
						"derivedColumnUnitConversionsNtypecorrections select(mapColumn(",
						"          list,",
						"          clouds_all,",
						"          feels_like_K = feels_like,",
						"          humidity,",
						"          pressure,",
						"          temp_K = temp,",
						"          temp_max_K = temp_max,",
						"          temp_min_K = temp_min,",
						"          weather_description,",
						"          weather_icon,",
						"          weather_id,",
						"          wind_deg,",
						"          wind_gust,",
						"          wind_speed,",
						"          rain_1h,",
						"          corrected_timestamp,",
						"          location,",
						"          datetime,",
						"          id,",
						"          temp_C,",
						"          temp_min_C,",
						"          temp_max_C,",
						"          feels_like_C,",
						"          feels_like_F,",
						"          temp_F,",
						"          temp_min_F,",
						"          temp_max_F,",
						"          lat,",
						"          lon",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectDesiredWeatherColumns",
						"selectDesiredWeatherColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkSilverHistoricalWeather"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HistoricalWeather_sink')]",
				"[concat(variables('factoryId'), '/datasets/ParquetHistoricalWeather')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_HistoricalWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PollutionPreProcessPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Air Pollution Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "airPollution_preprocessing_data",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AirPollutionSourceBronze": {},
									"PollutionSinkParquet": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/airPollution_preprocessing_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherPreprocessingPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Weather Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "weather_preprocessing_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"WeatherSourceBronze": {},
									"sinkSilverHistoricalWeather": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/weather_preprocessing_dataflow')]"
			]
		}
	]
}